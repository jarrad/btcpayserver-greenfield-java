package com.github.jarrad.btcpay.v1;

import java.math.BigDecimal;
import java.time.ZonedDateTime;
import java.util.Collection;
import java.util.Map;
import lombok.Builder;
import lombok.Value;
import lombok.extern.jackson.Jacksonized;
import org.jetbrains.annotations.Nullable;

/**
 * Client that can perform payment request operations on {@code BTCPayServer}.
 *
 * @see <a href="https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Payment-Requests">BTCPay
 * Payment Requests API</a>
 */
public interface PaymentRequestClient {

  /**
   * View information about the existing payment requests for the given store.
   */
  Collection<PaymentRequest> getPaymentRequests(final String storeId);

  /**
   * A pull payment allows its receiver to ask for payouts up to amount of currency every period.
   */
  PaymentRequest createPaymentRequest(final String storeId,
      final CreatePaymentRequestCommand command);

  /**
   * A single payment request.
   */
  @Value
  @Builder
  @Jacksonized
  class PaymentRequest {

    /**
     * Return the amount of the payment request.
     * <code>&lt;decimal&gt; &gt; 0</code>
     */
    BigDecimal amount;

    /**
     * Return the title of the payment request
     */
    String title;


    /**
     * Return the id of the payment request.
     */
    String id;

    /**
     * Return the store identifier that the payment request belongs to.
     */
    String storeId;

    /**
     * Return the status of the payment request. {@code Enum: "Pending" "Completed" "Expired"}
     */
    String status;

    /**
     * Return the creation date of the payment request.
     */
    ZonedDateTime createdTime;

    /**
     * Return the {@code ISO 4217 Currency code(BTC, EUR, USD, etc)} currency of the payment
     * request. If empty, the store's default currency code will be used.
     */
    @Nullable
    String currency;


    /**
     * Return the email used in invoices generated by the payment request.
     */
    @Nullable
    String email;

    /**
     * Return the description of the payment request.
     */
    @Nullable
    String description;

    @Nullable
    String embeddedCSS;

    @Nullable
    String customCSSLink;

    @Nullable
    Boolean allowCustomPaymentAmounts;

    /**
     * Return the expiry date of the payment request.
     */
    @Nullable
    ZonedDateTime expiryDate;

    @Nullable
    String formId;

    @Nullable
    Map<String, Object> formResponse;

    @Nullable
    Boolean archived;
  }

  enum PayRequestStatus {
    Unknown,
    Pending,
    Completed,
    Expired;
  }

  @Value
  @Builder
  @Jacksonized
  class CreatePaymentRequestCommand {

    /**
     * Return the amount of the payment request.
     * <code>&lt;decimal&gt; &gt; 0</code>
     */
    BigDecimal amount;

    /**
     * Return the title of the payment request
     */
    String title;

    /**
     * Return the {@code ISO 4217 Currency code(BTC, EUR, USD, etc)} currency of the payment
     * request. If empty, the store's default currency code will be used.
     */
    @Nullable
    String currency;

    /**
     * Return the email used in invoices generated by the payment request.
     */
    @Nullable
    String email;

    /**
     * Return the description of the payment request.
     */
    @Nullable
    String description;

    @Nullable
    String embeddedCSS;

    @Nullable
    String customCSSLink;

    @Nullable
    Boolean allowCustomPaymentAmounts;

    /**
     * Return the expiry date of the payment request.
     */
    @Nullable
    ZonedDateTime expiryDate;

    @Nullable
    String formId;

    @Nullable
    Map<String, Object> formResponse;
  }
}
